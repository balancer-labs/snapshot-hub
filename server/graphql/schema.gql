scalar Object

# Queries

type Query {
  space(
    id: String
  ): Space

  spaces(
    first: Int
    skip: Int
    orderBy: String
    orderDirection: OrderDirection
  ): [Space]

  proposal(
    id: String
  ): Proposal

  proposals(
    first: Int
    skip: Int
    where: ProposalWhere,
    orderBy: String
    orderDirection: OrderDirection
  ): [Proposal]
}

input ProposalWhere {
  id: String
  id_in: [String]
  space: String
  space_in: [String]
  state: String
}

enum OrderDirection {
  asc
  desc
}

# Types

type Space {
  id: String!
  name: String
  private: Boolean
  about: String
  terms: String
  location: String
  website: String
  twitter: String
  github: String
  email: String
  network: String
  symbol: String
  skin: String
  domain: String
  strategies: [Strategy]
  admin: [String]
  members: [String]
  filters: SpaceFilters
  plugins: Object
}

type SpaceFilters {
  minScore: Float
  onlyMembers: Boolean
}

type Proposal {
  id: String!
  author: String!
  created: Int!
  space: Space
  network: String!
  strategies: [Strategy]!
  plugins: Object!
  title: String!
  body: String
  choices: [String]!
  start: Int!
  end: Int!
  snapshot: String
  state: String
}

type Strategy {
  name: String!
  params: Object
}
